<canvas></canvas>

<script>
  import {
    renderEnvironment,
    scene,
    updateSceneSize,
    physicalObjectsStatic,
    physicalObjectArraysToAnimate,
  } from "./logic/renderEnvironment.ts"

  import { table } from "./3dObjects/Table.ts"
  import { jigsaw } from "./complexObjects/Jigsaw.ts"
  import { boardGameBundle } from "./complexObjects/BoardGameBundle.ts"
  import { cardDeck } from "./complexObjects/CardDeck.ts"
  import { jigsawAssemble } from "./logic/jigsawAssemble.ts"
  import { boardGame } from "./logic/boardGame.ts"
  import { cardGame } from "./logic/cardGame.ts"

  import { cameraPositionScroll } from "./logic/cameraPositionScroll.ts"
  import { welcomeScreenAnimation } from "./logic/welcomeScreenAnimation.ts"

  window.addEventListener("resize", updateSceneSize)

  const TableJigsaw = table({ posZ: 20 })
  const TableBoard = table({ posZ: 50 })
  const TableCards = table({ posZ: 80 })
  const Jigsaw = jigsaw({ posY: -2, posZ: 18 })
  const CardDeck = cardDeck({ posY: -2, posZ: 80 })
  const BoardGameBundle = boardGameBundle({
    posY: 0,
    posZ: 50,
  })

  physicalObjectsStatic.push(TableJigsaw, TableBoard, TableCards)
  physicalObjectArraysToAnimate.push(BoardGameBundle)
  Jigsaw.forEach((piece) => scene.add(piece.model))
  CardDeck.forEach((piece) => scene.add(piece.model))

  renderEnvironment()

  cameraPositionScroll()

  welcomeScreenAnimation()
  jigsawAssemble(Jigsaw, { posZ: 20 })
  boardGame(BoardGameBundle)
  cardGame(CardDeck, { posY: -2, posZ: 80 })
</script>

<style>
  canvas {
    position: sticky;
    top: 0;
    left: 0;
    width: 100%;
    grid-row: 1;
    grid-column: 1/-1;

    opacity: 0;
    animation: fadeIn 1s ease-in-out 1s forwards;
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }
</style>
